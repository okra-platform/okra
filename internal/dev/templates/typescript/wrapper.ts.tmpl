// This file is auto-generated by OKRA. Do not edit.
import { readInput, writeOutput, log } from './javy-runtime';
import * as service from '{{.UserModulePath}}';

// Type definitions for OKRA service request/response
interface ServiceRequest {
  method: string;
  input: any;
}

interface ServiceResponse {
  result?: any;
  error?: string;
}

// Method handlers mapped from service interface
const handlers: Record<string, Function> = {
{{range .Methods}}  '{{.}}': service.{{.}},
{{end}}};

/**
 * Main entry point for the OKRA service
 */
function main(): void {
  try {
    // Read the service request from stdin
    const request = readInput() as ServiceRequest;
    
    if (!request.method) {
      writeOutput({ error: 'Missing method in request' } as ServiceResponse);
      return;
    }
    
    // Find the handler for this method
    const handler = handlers[request.method];
    if (!handler) {
      writeOutput({ error: `Unknown method: ${request.method}` } as ServiceResponse);
      return;
    }
    
    // Execute the handler and capture the result
    try {
      const result = handler(request.input);
      
      // Handle async results (promises)
      if (result && typeof result.then === 'function') {
        result
          .then((value: any) => {
            writeOutput({ result: value } as ServiceResponse);
          })
          .catch((error: any) => {
            writeOutput({ error: error.message || String(error) } as ServiceResponse);
          });
      } else {
        // Synchronous result
        writeOutput({ result } as ServiceResponse);
      }
    } catch (error: any) {
      // Handler threw an error
      writeOutput({ error: error.message || String(error) } as ServiceResponse);
    }
  } catch (error: any) {
    // Fatal error (couldn't read input, etc.)
    try {
      writeOutput({ error: `Fatal error: ${error.message || String(error)}` } as ServiceResponse);
    } catch {
      // If we can't even write output, log to stderr
      log(`Fatal error: ${error}`);
    }
  }
}

// Register the main function with Javy
(globalThis as any).Shopify = { main };